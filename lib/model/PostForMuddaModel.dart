import 'package:google_mobile_ads/google_mobile_ads.dart';
import 'package:mudda/model/MuddaPostModel.dart';

import 'LeadersDataModel.dart';

class PostForMuddaModel {
  int? status;
  String? message;
  List<PostForMudda>? data;
  String? path;
  String? userpath;
  dynamic totalUsers;
  dynamic containerUsers;
  dynamic supportPercentage;
  dynamic muddaThumbnail;
  dynamic muddaTitle;
  dynamic muddaOwner;
  dynamic favour;
  dynamic opposition;
  dynamic joinRequests;
  dynamic postApprovals;
  dynamic totalNewPosts;
  LeadershipModelDataMuddaInviteData? favourInvite;
  LeadershipModelDataMuddaInviteData? oppositionInvite;
  String? chatId;

  PostForMuddaModel({
    this.status,
    this.message,
    this.data,
    this.path,
    this.userpath,
    this.totalUsers,
    this.containerUsers,
    this.supportPercentage,
    this.muddaThumbnail,
    this.muddaTitle,
    this.muddaOwner,
    this.favour,
    this.opposition,
    this.joinRequests,
    this.postApprovals,
    this.totalNewPosts,
    this.favourInvite,
    this.oppositionInvite,
    this.chatId
  });

  PostForMuddaModel.fromJson(Map<dynamic, dynamic> json) {
    status = json['status'];
    message = json['message'];
    if (json['data'] != null) {
      data = <PostForMudda>[];
      json['data'].forEach((v) {
        data!.add(PostForMudda.fromJson(v));
      });
    }
    path = json['path'];
    userpath = json['userpath'];
    totalUsers = json['totalUsers'];
    containerUsers = json['containerUsers'];
    supportPercentage = json['supportPercentage'];
    muddaThumbnail = json['muddaThumbnail'];
    muddaTitle = json['muddaTitle'];
    muddaOwner = json['muddaOwner'];
    favour = json['favour'];
    opposition = json['opposition'];
    joinRequests = json['joinRequests'];
    postApprovals = json['postApprovals'];
    totalNewPosts = json['totalNewPosts'];
    favourInvite = (json['favourInvite'] != null)
        ? LeadershipModelDataMuddaInviteData.fromJson(json['favourInvite'])
        : null;
    oppositionInvite = (json['oppositionInvite'] != null)
        ? LeadershipModelDataMuddaInviteData.fromJson(json['oppositionInvite'])
        : null;
    chatId = json['chatId'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['status'] = this.status;
    data['message'] = this.message;
    if (this.data != null) {
      data['data'] = this.data!.map((v) => v.toJson()).toList();
    }
    data['path'] = this.path;
    data['userpath'] = this.userpath;
    data['totalUsers'] = this.totalUsers;
    data['containerUsers'] = this.containerUsers;
    data['supportPercentage'] = this.supportPercentage;
    data['muddaThumbnail'] = this.muddaThumbnail;
    data['muddaOwner'] = this.muddaOwner;
    data['favour'] = this.favour;
    data['opposition'] = this.opposition;
    data['joinRequests'] = this.joinRequests;
    data['postApprovals'] = this.postApprovals;
    data['totalNewPosts'] = this.totalNewPosts;
    if (favourInvite != null) {
      data['favourInvite'] = favourInvite!.toJson();
    }
    if (oppositionInvite != null) {
      data['oppositionInvite'] = oppositionInvite!.toJson();
    }
    data['chatId'] = this.chatId;
    return data;
  }
}

///
/// Code generated by jsonToDartModel https://ashamp.github.io/jsonToDartModel/
///
class PostForMuddaModelDataParentPostUser {
/*
{
  "_id": "6336a21cb552d25ee12434f4",
  "fullname": "Abhishek Kumar",
  "profile": "1664526575732.jpg"
}
*/

  String? Id;
  String? fullname;
  String? profile;

  PostForMuddaModelDataParentPostUser({
    this.Id,
    this.fullname,
    this.profile,
  });

  PostForMuddaModelDataParentPostUser.fromJson(Map<String, dynamic> json) {
    Id = json['_id']?.toString();
    fullname = json['fullname']?.toString();
    profile = json['profile']?.toString();
  }

  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['_id'] = Id;
    data['fullname'] = fullname;
    data['profile'] = profile;
    return data;
  }
}

class PostForMuddaModelDataParentPostLikerUser {
/*
{
  "_id": "6378aa1881c0befdaed280fc",
  "fullname": "Ashish Dodamani",
  "username": "ashish_dodamani_email",
  "user_type": "user",
  "profile_type": "public",
  "organization_type": null,
  "email": "ashishdodamani03@gmail.com",
  "password": null,
  "mobile_no": null,
  "country_code": null,
  "otp": null,
  "otp_time": null,
  "is_otp_verified": 0,
  "email_verified_at": null,
  "profile": null,
  "registration_document": null,
  "is_govt_register": null,
  "profession": "Developer ",
  "mudda_count": 0,
  "description": null,
  "category": [
    null
  ],
  "age": "18-25",
  "gender": "null",
  "org_address": null,
  "location": null,
  "city": "thane",
  "state": "maharashtra",
  "country": "india",
  "zipcode": null,
  "latitude": null,
  "longitude": null,
  "social_id": "117417422580984469365",
  "social_pic": "https://lh3.googleusercontent.com/a/ALm5wu3GJVkiMD-R9HXJYZLPpIQBjQ80igLFuwXIVsHR=s96-c",
  "social_token": "ya29.a0AeTM1ifMFlshhza-vaQVWRvC-1Z6wJzXf-V9RDVdURNGiABoRPTCZ9vVObxAMkvrjIoQZw4-f-RkDhP-l9TicTw00hOxeYGl32wpkBqcb7hNJ9cSIPyGJQeRT_lu1i2SdGVIs_V0gpTdZ75AxopGS2gkZcQ6swaCgYKAVQSARESFQHWtWOmAtSC4VPxUupUH6v0mj-Ajg0165",
  "register_type": "google",
  "firebase_token": null,
  "referral_code": "218186",
  "refer_by": "62d53370c1315f1ed810c420",
  "isProfileVerified": 0,
  "verification_video": null,
  "status": 1,
  "wallet": 0,
  "wallet_wining": 0,
  "is_withdraw_allow": 1,
  "created_by": null,
  "updated_by": null,
  "isBlocked": false,
  "blockedTill": null,
  "blockedBy": null,
  "deleted": false,
  "createdAt": "2022-11-19T10:04:08.006Z",
  "updatedAt": "2022-11-23T10:22:51.505Z",
  "__v": 0
}
*/

  String? Id;
  String? fullname;
  String? username;
  String? userType;
  String? profileType;
  String? organizationType;
  String? email;
  String? password;
  String? mobileNo;
  String? countryCode;
  String? otp;
  String? otpTime;
  int? isOtpVerified;
  String? emailVerifiedAt;
  String? profile;
  String? registrationDocument;
  String? isGovtRegister;
  String? profession;
  int? muddaCount;
  String? description;

  String? age;
  String? gender;
  String? orgAddress;
  String? location;
  String? city;
  String? state;
  String? country;
  String? zipcode;
  String? latitude;
  String? longitude;
  String? socialId;
  String? socialPic;
  String? socialToken;
  String? registerType;
  String? firebaseToken;
  String? referralCode;
  String? referBy;
  int? isProfileVerified;
  String? verificationVideo;
  int? status;
  int? wallet;
  int? walletWining;
  int? isWithdrawAllow;
  String? createdBy;
  String? updatedBy;
  bool? isBlocked;
  String? blockedTill;
  String? blockedBy;
  bool? deleted;
  String? createdAt;
  String? updatedAt;
  int? V;

  PostForMuddaModelDataParentPostLikerUser({
    this.Id,
    this.fullname,
    this.username,
    this.userType,
    this.profileType,
    this.organizationType,
    this.email,
    this.password,
    this.mobileNo,
    this.countryCode,
    this.otp,
    this.otpTime,
    this.isOtpVerified,
    this.emailVerifiedAt,
    this.profile,
    this.registrationDocument,
    this.isGovtRegister,
    this.profession,
    this.muddaCount,
    this.description,
    this.age,
    this.gender,
    this.orgAddress,
    this.location,
    this.city,
    this.state,
    this.country,
    this.zipcode,
    this.latitude,
    this.longitude,
    this.socialId,
    this.socialPic,
    this.socialToken,
    this.registerType,
    this.firebaseToken,
    this.referralCode,
    this.referBy,
    this.isProfileVerified,
    this.verificationVideo,
    this.status,
    this.wallet,
    this.walletWining,
    this.isWithdrawAllow,
    this.createdBy,
    this.updatedBy,
    this.isBlocked,
    this.blockedTill,
    this.blockedBy,
    this.deleted,
    this.createdAt,
    this.updatedAt,
    this.V,
  });

  PostForMuddaModelDataParentPostLikerUser.fromJson(Map<String, dynamic> json) {
    Id = json['_id']?.toString();
    fullname = json['fullname']?.toString();
    username = json['username']?.toString();
    userType = json['user_type']?.toString();
    profileType = json['profile_type']?.toString();
    organizationType = json['organization_type']?.toString();
    email = json['email']?.toString();
    password = json['password']?.toString();
    mobileNo = json['mobile_no']?.toString();
    countryCode = json['country_code']?.toString();
    otp = json['otp']?.toString();
    otpTime = json['otp_time']?.toString();
    isOtpVerified = json['is_otp_verified']?.toInt();
    emailVerifiedAt = json['email_verified_at']?.toString();
    profile = json['profile']?.toString();
    registrationDocument = json['registration_document']?.toString();
    isGovtRegister = json['is_govt_register']?.toString();
    profession = json['profession']?.toString();
    muddaCount = json['mudda_count']?.toInt();
    description = json['description']?.toString();
    age = json['age']?.toString();
    gender = json['gender']?.toString();
    orgAddress = json['org_address']?.toString();
    location = json['location']?.toString();
    city = json['city']?.toString();
    state = json['state']?.toString();
    country = json['country']?.toString();
    zipcode = json['zipcode']?.toString();
    latitude = json['latitude']?.toString();
    longitude = json['longitude']?.toString();
    socialId = json['social_id']?.toString();
    socialPic = json['social_pic']?.toString();
    socialToken = json['social_token']?.toString();
    registerType = json['register_type']?.toString();
    firebaseToken = json['firebase_token']?.toString();
    referralCode = json['referral_code']?.toString();
    referBy = json['refer_by']?.toString();
    isProfileVerified = json['isProfileVerified']?.toInt();
    verificationVideo = json['verification_video']?.toString();
    status = json['status']?.toInt();
    wallet = json['wallet']?.toInt();
    walletWining = json['wallet_wining']?.toInt();
    isWithdrawAllow = json['is_withdraw_allow']?.toInt();
    createdBy = json['created_by']?.toString();
    updatedBy = json['updated_by']?.toString();
    isBlocked = json['isBlocked'];
    blockedTill = json['blockedTill']?.toString();
    blockedBy = json['blockedBy']?.toString();
    deleted = json['deleted'];
    createdAt = json['createdAt']?.toString();
    updatedAt = json['updatedAt']?.toString();
    V = json['__v']?.toInt();
  }

  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['_id'] = Id;
    data['fullname'] = fullname;
    data['username'] = username;
    data['user_type'] = userType;
    data['profile_type'] = profileType;
    data['organization_type'] = organizationType;
    data['email'] = email;
    data['password'] = password;
    data['mobile_no'] = mobileNo;
    data['country_code'] = countryCode;
    data['otp'] = otp;
    data['otp_time'] = otpTime;
    data['is_otp_verified'] = isOtpVerified;
    data['email_verified_at'] = emailVerifiedAt;
    data['profile'] = profile;
    data['registration_document'] = registrationDocument;
    data['is_govt_register'] = isGovtRegister;
    data['profession'] = profession;
    data['mudda_count'] = muddaCount;
    data['description'] = description;
    data['age'] = age;
    data['gender'] = gender;
    data['org_address'] = orgAddress;
    data['location'] = location;
    data['city'] = city;
    data['state'] = state;
    data['country'] = country;
    data['zipcode'] = zipcode;
    data['latitude'] = latitude;
    data['longitude'] = longitude;
    data['social_id'] = socialId;
    data['social_pic'] = socialPic;
    data['social_token'] = socialToken;
    data['register_type'] = registerType;
    data['firebase_token'] = firebaseToken;
    data['referral_code'] = referralCode;
    data['refer_by'] = referBy;
    data['isProfileVerified'] = isProfileVerified;
    data['verification_video'] = verificationVideo;
    data['status'] = status;
    data['wallet'] = wallet;
    data['wallet_wining'] = walletWining;
    data['is_withdraw_allow'] = isWithdrawAllow;
    data['created_by'] = createdBy;
    data['updated_by'] = updatedBy;
    data['isBlocked'] = isBlocked;
    data['blockedTill'] = blockedTill;
    data['blockedBy'] = blockedBy;
    data['deleted'] = deleted;
    data['createdAt'] = createdAt;
    data['updatedAt'] = updatedAt;
    data['__v'] = V;
    return data;
  }
}

class PostForMuddaModelDataParentPostLiker {
/*
{
  "_id": "637df926cd9bad710fec3f49",
  "user_id": "6378aa1881c0befdaed280fc",
  "relative_id": "63761b09b054cd499e3989fd",
  "relative_type": "PostForMudda",
  "status": true,
  "deleted": false,
  "createdAt": "2022-11-23T10:42:46.079Z",
  "updatedAt": "2022-11-23T10:42:46.079Z",
  "__v": 0,
  "user": {
    "_id": "6378aa1881c0befdaed280fc",
    "fullname": "Ashish Dodamani",
    "username": "ashish_dodamani_email",
    "user_type": "user",
    "profile_type": "public",
    "organization_type": null,
    "email": "ashishdodamani03@gmail.com",
    "password": null,
    "mobile_no": null,
    "country_code": null,
    "otp": null,
    "otp_time": null,
    "is_otp_verified": 0,
    "email_verified_at": null,
    "profile": null,
    "registration_document": null,
    "is_govt_register": null,
    "profession": "Developer ",
    "mudda_count": 0,
    "description": null,
    "category": [
      null
    ],
    "age": "18-25",
    "gender": "null",
    "org_address": null,
    "location": null,
    "city": "thane",
    "state": "maharashtra",
    "country": "india",
    "zipcode": null,
    "latitude": null,
    "longitude": null,
    "social_id": "117417422580984469365",
    "social_pic": "https://lh3.googleusercontent.com/a/ALm5wu3GJVkiMD-R9HXJYZLPpIQBjQ80igLFuwXIVsHR=s96-c",
    "social_token": "ya29.a0AeTM1ifMFlshhza-vaQVWRvC-1Z6wJzXf-V9RDVdURNGiABoRPTCZ9vVObxAMkvrjIoQZw4-f-RkDhP-l9TicTw00hOxeYGl32wpkBqcb7hNJ9cSIPyGJQeRT_lu1i2SdGVIs_V0gpTdZ75AxopGS2gkZcQ6swaCgYKAVQSARESFQHWtWOmAtSC4VPxUupUH6v0mj-Ajg0165",
    "register_type": "google",
    "firebase_token": null,
    "referral_code": "218186",
    "refer_by": "62d53370c1315f1ed810c420",
    "isProfileVerified": 0,
    "verification_video": null,
    "status": 1,
    "wallet": 0,
    "wallet_wining": 0,
    "is_withdraw_allow": 1,
    "created_by": null,
    "updated_by": null,
    "isBlocked": false,
    "blockedTill": null,
    "blockedBy": null,
    "deleted": false,
    "createdAt": "2022-11-19T10:04:08.006Z",
    "updatedAt": "2022-11-23T10:22:51.505Z",
    "__v": 0
  }
}
*/

  String? Id;
  String? userId;
  String? relativeId;
  String? relativeType;
  bool? status;
  bool? deleted;
  String? createdAt;
  String? updatedAt;
  int? V;
  PostForMuddaModelDataParentPostLikerUser? user;

  PostForMuddaModelDataParentPostLiker({
    this.Id,
    this.userId,
    this.relativeId,
    this.relativeType,
    this.status,
    this.deleted,
    this.createdAt,
    this.updatedAt,
    this.V,
    this.user,
  });

  PostForMuddaModelDataParentPostLiker.fromJson(Map<String, dynamic> json) {
    Id = json['_id']?.toString();
    userId = json['user_id']?.toString();
    relativeId = json['relative_id']?.toString();
    relativeType = json['relative_type']?.toString();
    status = json['status'];
    deleted = json['deleted'];
    createdAt = json['createdAt']?.toString();
    updatedAt = json['updatedAt']?.toString();
    V = json['__v']?.toInt();
    user = (json['user'] != null)
        ? PostForMuddaModelDataParentPostLikerUser.fromJson(json['user'])
        : null;
  }

  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['_id'] = Id;
    data['user_id'] = userId;
    data['relative_id'] = relativeId;
    data['relative_type'] = relativeType;
    data['status'] = status;
    data['deleted'] = deleted;
    data['createdAt'] = createdAt;
    data['updatedAt'] = updatedAt;
    data['__v'] = V;
    if (user != null) {
      data['user'] = user!.toJson();
    }
    return data;
  }
}

class PostForMuddaModelDataParentPostGallery {
/*
{
  "_id": "63761b09b054cd499e3989ff",
  "user_id": "6336a21cb552d25ee12434f4",
  "relative_id": "63761b09b054cd499e3989fd",
  "relative_type": "PostForMudda",
  "file": "1668684526131.jpg",
  "path": "uploads/post-for-mudda/",
  "status": 1,
  "created_by": null,
  "updated_by": null,
  "deleted": false,
  "createdAt": "2022-11-17T11:29:13.218Z",
  "updatedAt": "2022-11-17T11:29:13.218Z",
  "__v": 0
}
*/

  String? Id;
  String? userId;
  String? relativeId;
  String? relativeType;
  String? file;
  String? path;
  int? status;
  String? createdBy;
  String? updatedBy;
  bool? deleted;
  String? createdAt;
  String? updatedAt;
  int? V;

  PostForMuddaModelDataParentPostGallery({
    this.Id,
    this.userId,
    this.relativeId,
    this.relativeType,
    this.file,
    this.path,
    this.status,
    this.createdBy,
    this.updatedBy,
    this.deleted,
    this.createdAt,
    this.updatedAt,
    this.V,
  });

  PostForMuddaModelDataParentPostGallery.fromJson(Map<String, dynamic> json) {
    Id = json['_id']?.toString();
    userId = json['user_id']?.toString();
    relativeId = json['relative_id']?.toString();
    relativeType = json['relative_type']?.toString();
    file = json['file']?.toString();
    path = json['path']?.toString();
    status = json['status']?.toInt();
    createdBy = json['created_by']?.toString();
    updatedBy = json['updated_by']?.toString();
    deleted = json['deleted'];
    createdAt = json['createdAt']?.toString();
    updatedAt = json['updatedAt']?.toString();
    V = json['__v']?.toInt();
  }

  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['_id'] = Id;
    data['user_id'] = userId;
    data['relative_id'] = relativeId;
    data['relative_type'] = relativeType;
    data['file'] = file;
    data['path'] = path;
    data['status'] = status;
    data['created_by'] = createdBy;
    data['updated_by'] = updatedBy;
    data['deleted'] = deleted;
    data['createdAt'] = createdAt;
    data['updatedAt'] = updatedAt;
    data['__v'] = V;
    return data;
  }
}

class PostForMuddaModelDataParentPost {
/*
{
  "_id": "63761b09b054cd499e3989fd",
  "mudda_description": "Image post",
  "post_in": "favour",
  "createdAt": "2022-11-17T11:29:13.207Z",
  "gallery": [
    {
      "_id": "63761b09b054cd499e3989ff",
      "user_id": "6336a21cb552d25ee12434f4",
      "relative_id": "63761b09b054cd499e3989fd",
      "relative_type": "PostForMudda",
      "file": "1668684526131.jpg",
      "path": "uploads/post-for-mudda/",
      "status": 1,
      "created_by": null,
      "updated_by": null,
      "deleted": false,
      "createdAt": "2022-11-17T11:29:13.218Z",
      "updatedAt": "2022-11-17T11:29:13.218Z",
      "__v": 0
    }
  ],
  "commentorsCount": 0,
  "liker": [
    {
      "_id": "637df926cd9bad710fec3f49",
      "user_id": "6378aa1881c0befdaed280fc",
      "relative_id": "63761b09b054cd499e3989fd",
      "relative_type": "PostForMudda",
      "status": true,
      "deleted": false,
      "createdAt": "2022-11-23T10:42:46.079Z",
      "updatedAt": "2022-11-23T10:42:46.079Z",
      "__v": 0,
      "user": {
        "_id": "6378aa1881c0befdaed280fc",
        "fullname": "Ashish Dodamani",
        "username": "ashish_dodamani_email",
        "user_type": "user",
        "profile_type": "public",
        "organization_type": null,
        "email": "ashishdodamani03@gmail.com",
        "password": null,
        "mobile_no": null,
        "country_code": null,
        "otp": null,
        "otp_time": null,
        "is_otp_verified": 0,
        "email_verified_at": null,
        "profile": null,
        "registration_document": null,
        "is_govt_register": null,
        "profession": "Developer ",
        "mudda_count": 0,
        "description": null,
        "category": [
          null
        ],
        "age": "18-25",
        "gender": "null",
        "org_address": null,
        "location": null,
        "city": "thane",
        "state": "maharashtra",
        "country": "india",
        "zipcode": null,
        "latitude": null,
        "longitude": null,
        "social_id": "117417422580984469365",
        "social_pic": "https://lh3.googleusercontent.com/a/ALm5wu3GJVkiMD-R9HXJYZLPpIQBjQ80igLFuwXIVsHR=s96-c",
        "social_token": "ya29.a0AeTM1ifMFlshhza-vaQVWRvC-1Z6wJzXf-V9RDVdURNGiABoRPTCZ9vVObxAMkvrjIoQZw4-f-RkDhP-l9TicTw00hOxeYGl32wpkBqcb7hNJ9cSIPyGJQeRT_lu1i2SdGVIs_V0gpTdZ75AxopGS2gkZcQ6swaCgYKAVQSARESFQHWtWOmAtSC4VPxUupUH6v0mj-Ajg0165",
        "register_type": "google",
        "firebase_token": null,
        "referral_code": "218186",
        "refer_by": "62d53370c1315f1ed810c420",
        "isProfileVerified": 0,
        "verification_video": null,
        "status": 1,
        "wallet": 0,
        "wallet_wining": 0,
        "is_withdraw_allow": 1,
        "created_by": null,
        "updated_by": null,
        "isBlocked": false,
        "blockedTill": null,
        "blockedBy": null,
        "deleted": false,
        "createdAt": "2022-11-19T10:04:08.006Z",
        "updatedAt": "2022-11-23T10:22:51.505Z",
        "__v": 0
      }
    }
  ],
  "likersCount": 1,
  "dislikersCount": 0,
  "agreeStatus": true,
  "user": {
    "_id": "6336a21cb552d25ee12434f4",
    "fullname": "Abhishek Kumar",
    "profile": "1664526575732.jpg"
  },
  "followStatus": false,
  "replies": 1
}
*/

  String? Id;
  String? muddaDescription;
  String? postIn;
  String? postAs;
  String? createdAt;
  List<Gallery>? gallery;
  int? commentorsCount;
  List<PostForMuddaModelDataParentPostLiker?>? liker;
  int? likersCount;
  int? dislikersCount;
  bool? agreeStatus;
  AcceptUserDetail? user;
  bool? followStatus;
  int? replies;

  PostForMuddaModelDataParentPost({
    this.Id,
    this.muddaDescription,
    this.postIn,
    this.postAs,
    this.createdAt,
    this.gallery,
    this.commentorsCount,
    this.liker,
    this.likersCount,
    this.dislikersCount,
    this.agreeStatus,
    this.user,
    this.followStatus,
    this.replies,
  });

  PostForMuddaModelDataParentPost.fromJson(Map<String, dynamic> json) {
    Id = json['_id']?.toString();
    muddaDescription = json['mudda_description']?.toString();
    postIn = json['post_in']?.toString();
    postAs = json['post_as']?.toString();
    createdAt = json['createdAt']?.toString();
    if (json['gallery'] != null) {
      final v = json['gallery'];
      final arr0 = <Gallery>[];
      v.forEach((v) {
        arr0.add(Gallery.fromJson(v));
      });
      gallery = arr0;
    }
    commentorsCount = json['commentorsCount']?.toInt();
    if (json['liker'] != null) {
      final v = json['liker'];
      final arr0 = <PostForMuddaModelDataParentPostLiker>[];
      v.forEach((v) {
        arr0.add(PostForMuddaModelDataParentPostLiker.fromJson(v));
      });
      liker = arr0;
    }
    likersCount = json['likersCount']?.toInt();
    dislikersCount = json['dislikersCount']?.toInt();
    agreeStatus = json['agreeStatus'];
    user =
        (json['user'] != null) ? AcceptUserDetail.fromJson(json['user']) : null;
    followStatus = json['followStatus'];
    replies = json['replies']?.toInt();
  }

  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['_id'] = Id;
    data['mudda_description'] = muddaDescription;
    data['post_in'] = postIn;
    data['post_as'] = postAs;
    data['createdAt'] = createdAt;
    if (gallery != null) {
      final v = gallery;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v.toJson());
      });
      data['gallery'] = arr0;
    }
    data['commentorsCount'] = commentorsCount;
    if (liker != null) {
      final v = liker;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data['liker'] = arr0;
    }
    data['likersCount'] = likersCount;
    data['dislikersCount'] = dislikersCount;
    data['agreeStatus'] = agreeStatus;
    if (user != null) {
      data['user'] = user!.toJson();
    }
    data['followStatus'] = followStatus;
    data['replies'] = replies;
    return data;
  }
}

class PostForMudda {
  String? sId;
  String? userId;
  String? muddaId;
  String? postAs;
  String? thumbnail;
  String? title;
  String? muddaDescription;
  List<String>? hashtags;
  String? postIn;
  int? isVerify;
  String? verifyBy;
  int? status;
  bool? isUploading;
  String? createdBy;
  String? updatedBy;
  bool? deleted;
  String? createdAt;
  String? updatedAt;
  PostForMuddaModelDataParentPost? parentPost;
  int? iV;
  List<Gallery>? gallery;
  List<Comments>? comments;
  int? commentorsCount;
  List<Comments>? liker;
  int? likersCount;
  List<Comments>? disliker;
  int? dislikersCount;
  bool? agreeStatus;
  int? trending;
  int? replies;
  int? hotPost;
  bool? followStatus;
  bool? isContainerAdsLoaded = false;
  NativeAd? ad;
  AcceptUserDetail? userDetail;
  bool? isUserBlocked;
  String? id;

  PostForMudda(
      {this.sId,
      this.userId,
      this.muddaId,
      this.isUploading,
      this.isContainerAdsLoaded,
      this.postAs,
      this.thumbnail,
      this.title,
      this.muddaDescription,
      this.hashtags,
      this.postIn,
      this.isVerify,
      this.verifyBy,
      this.parentPost,
      this.status,
      this.createdBy,
      this.updatedBy,
      this.deleted,
      this.createdAt,
      this.updatedAt,
      this.iV,
      this.gallery,
      this.comments,
      this.commentorsCount,
      this.liker,
      this.likersCount,
      this.disliker,
      this.agreeStatus,
      this.dislikersCount,
      this.trending,
      this.replies,
      this.followStatus = false,
      this.hotPost = 0,
      this.userDetail,
        this.isUserBlocked,
      this.id});

  PostForMudda.fromJson(Map<String, dynamic> json) {
    sId = json['_id'];
    userId = json['user_id'];
    muddaId = json['mudda_id'];
    postAs = json['post_as'];
    thumbnail = json['thumbnail'];
    title = json['title'];
    muddaDescription = json['mudda_description'];
    hashtags = json['hashtags'].cast<String>();
    postIn = json['post_in'];
    isVerify = json['isVerify'];
    verifyBy = json['verify_by'];
    status = json['status'];
    createdBy = json['created_by'];
    parentPost = (json['parentPost'] != null)
        ? PostForMuddaModelDataParentPost.fromJson(json['parentPost'])
        : null;
    updatedBy = json['updated_by'];
    deleted = json['deleted'];
    createdAt = json['createdAt'];
    updatedAt = json['updatedAt'];
    iV = json['__v'];
    if (json['gallery'] != null) {
      gallery = <Gallery>[];
      json['gallery'].forEach((v) {
        gallery!.add(new Gallery.fromJson(v));
      });
    }
    if (json['comments'] != null) {
      comments = <Comments>[];
      json['comments'].forEach((v) {
        comments!.add(new Comments.fromJson(v));
      });
    }
    commentorsCount = json['commentorsCount'] ?? 0;
    if (json['liker'] != null) {
      liker = <Comments>[];
      json['liker'].forEach((v) {
        liker!.add(Comments.fromJson(v));
      });
    }
    likersCount = json['likersCount'] ?? 0;
    agreeStatus = json['agreeStatus'];
    trending = json['trending'] ?? 0;
    replies = json['replies'] ?? 0;
    followStatus = json['followStatus'] ?? false;
    hotPost = json['hotPost'] ?? 0;
    if (json['disliker'] != null) {
      disliker = <Comments>[];
      json['disliker'].forEach((v) {
        disliker!.add(Comments.fromJson(v));
      });
    }
    dislikersCount = json['dislikersCount'] ?? 0;
    userDetail = json['userDetail'] != null
        ? AcceptUserDetail.fromJson(json['userDetail'])
        : null;
    isUserBlocked = json['isUserBlocked'] ?? false;
    id = json['id'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data['_id'] = this.sId;
    data['user_id'] = this.userId;
    data['mudda_id'] = this.muddaId;
    data['post_as'] = this.postAs;
    data['thumbnail'] = this.thumbnail;
    data['title'] = this.title;
    data['mudda_description'] = this.muddaDescription;
    data['hashtags'] = this.hashtags;
    data['post_in'] = this.postIn;
    data['isVerify'] = this.isVerify;
    data['verify_by'] = this.verifyBy;
    data['status'] = this.status;
    data['created_by'] = this.createdBy;
    data['updated_by'] = this.updatedBy;
    data['deleted'] = this.deleted;
    data['createdAt'] = this.createdAt;
    data['replies'] = this.replies;
    data['hotPost'] = this.hotPost;
    data['followStatus'] = this.followStatus;
    if (parentPost != null) {
      data['parentPost'] = parentPost;
    }
    data['updatedAt'] = this.updatedAt;
    data['agreeStatus'] = this.agreeStatus;
    data['__v'] = this.iV;
    if (this.gallery != null) {
      data['gallery'] = this.gallery!.map((v) => v.toJson()).toList();
    }
    if (this.comments != null) {
      data['comments'] = this.comments!.map((v) => v.toJson()).toList();
    }
    data['commentorsCount'] = this.commentorsCount;
    if (this.liker != null) {
      data['liker'] = this.liker!.map((v) => v.toJson()).toList();
    }
    data['likersCount'] = this.likersCount;
    if (this.disliker != null) {
      data['disliker'] = this.disliker!.map((v) => v.toJson()).toList();
    }
    data['dislikersCount'] = this.dislikersCount;
    if (this.userDetail != null) {
      data['userDetail'] = this.userDetail!.toJson();
    }
    data['isUserBlocked'] = this.isUserBlocked;
    data['id'] = this.id;
    return data;
  }
}

class Gallery {
  String? sId;
  String? userId;
  String? relativeId;
  String? relativeType;
  String? file;
  String? path;
  int? status;
  Null? createdBy;
  Null? updatedBy;
  bool? deleted;
  String? createdAt;
  String? updatedAt;
  int? iV;

  Gallery({
    this.sId,
    this.userId,
    this.relativeId,
    this.relativeType,
    this.file,
    this.path,
    this.status,
    this.createdBy,
    this.updatedBy,
    this.deleted,
    this.createdAt,
    this.updatedAt,
    this.iV,
  });

  Gallery.fromJson(Map<String, dynamic> json) {
    sId = json['_id'];
    userId = json['user_id'];
    relativeId = json['relative_id'];
    relativeType = json['relative_type'];
    file = json['file'];
    path = json['path'];
    status = json['status'];
    createdBy = json['created_by'];
    updatedBy = json['updated_by'];
    deleted = json['deleted'];
    createdAt = json['createdAt'];
    updatedAt = json['updatedAt'];
    iV = json['__v'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['_id'] = this.sId;
    data['user_id'] = this.userId;
    data['relative_id'] = this.relativeId;
    data['relative_type'] = this.relativeType;
    data['file'] = this.file;
    data['path'] = this.path;
    data['status'] = this.status;
    data['created_by'] = this.createdBy;
    data['updated_by'] = this.updatedBy;
    data['deleted'] = this.deleted;
    data['createdAt'] = this.createdAt;
    data['updatedAt'] = this.updatedAt;
    data['__v'] = this.iV;
    return data;
  }
}

class Comments {
  String? sId;
  String? userId;
  String? relativeId;
  String? relativeType;
  String? commentType;
  String? commentText;
  int? userIdentity;
  bool? deleted;
  String? createdAt;
  String? updatedAt;
  int? iV;
  AcceptUserDetail? user;
  bool? isUserBlocked;
  List<Comments>? replies;
  int? likersCount;
  int? dislikersCount;
  bool? agreeStatus;
  String? id;

  Comments(
      {this.sId,
      this.userId,
      this.relativeId,
      this.relativeType,
      this.commentType,
      this.commentText,
      this.userIdentity,
      this.deleted,
      this.createdAt,
      this.updatedAt,
      this.iV,
      this.user,
       this.isUserBlocked,
      this.replies,
      this.likersCount,
      this.dislikersCount,
      this.agreeStatus,
      this.id});

  Comments.fromJson(Map<dynamic, dynamic> json) {
    sId = json['_id'];
    userId = json['user_id'];
    relativeId = json['relative_id'];
    relativeType = json['relative_type'];
    commentType = json['comment_type'];
    commentText = json['commentText'];
    userIdentity = json['user_identity'];
    deleted = json['deleted'];
    createdAt = json['createdAt'];
    updatedAt = json['updatedAt'];
    agreeStatus = json['agreeStatus'];

    iV = json['__v'];
    user =
        json['user'] != null ? AcceptUserDetail.fromJson(json['user']) : null;
    isUserBlocked = json['isUserBlocked'] ?? false;
    if (json['replies'] != null) {
      replies = <Comments>[];
      json['replies'].forEach((v) {
        replies!.add(Comments.fromJson(v));
      });
    }
    likersCount = json['likersCount'] ?? 0;
    dislikersCount = json['dislikersCount'] ?? 0;
    id = json['id'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['_id'] = this.sId;
    data['user_id'] = this.userId;
    data['relative_id'] = this.relativeId;
    data['relative_type'] = this.relativeType;
    data['comment_type'] = this.commentType;
    data['commentText'] = this.commentText;
    data['deleted'] = this.deleted;
    data['createdAt'] = this.createdAt;
    data['updatedAt'] = this.updatedAt;
    data['agreeStatus'] = this.agreeStatus;

    data['__v'] = this.iV;
    if (this.user != null) {
      data['user'] = this.user!.toJson();
    }
    data['isUserBlocked'] = this.isUserBlocked;
    if (this.replies != null) {
      data['replies'] = this.replies!.map((v) => v.toJson()).toList();
    }
    data['likersCount'] = this.likersCount;
    data['dislikersCount'] = this.dislikersCount;
    data['id'] = this.id;
    return data;
  }
}

// -=-=-=-=- Old model -=-=-=-=-

// import 'package:google_mobile_ads/google_mobile_ads.dart';
// import 'package:mudda/model/MuddaPostModel.dart';
//
// class PostForMuddaModel {
//   int? status;
//   String? message;
//   List<PostForMudda>? data;
//   String? path;
//
//   PostForMuddaModel({this.status, this.message, this.data, this.path});
//
//   PostForMuddaModel.fromJson(Map<dynamic, dynamic> json) {
//     status = json['status'];
//     message = json['message'];
//     if (json['data'] != null) {
//       data = <PostForMudda>[];
//       json['data'].forEach((v) {
//         data!.add(PostForMudda.fromJson(v));
//       });
//     }
//     path = json['path'];
//   }
//
//   Map<String, dynamic> toJson() {
//     final Map<String, dynamic> data = new Map<String, dynamic>();
//     data['status'] = this.status;
//     data['message'] = this.message;
//     if (this.data != null) {
//       data['data'] = this.data!.map((v) => v.toJson()).toList();
//     }
//     data['path'] = this.path;
//     return data;
//   }
// }
//
// class PostForMudda {
//   String? sId;
//   String? userId;
//   String? muddaId;
//   String? postAs;
//   String? thumbnail;
//   String? title;
//   String? muddaDescription;
//   List<String>? hashtags;
//   String? postIn;
//   int? isVerify;
//   String? verifyBy;
//   int? status;
//   String? createdBy;
//   String? updatedBy;
//   bool? deleted;
//   String? createdAt;
//   String? updatedAt;
//   int? iV;
//   List<Gallery>? gallery;
//   List<Comments>? comments;
//   int? commentorsCount;
//   List<Comments>? liker;
//   int? likersCount;
//   List<Comments>? disliker;
//   int? dislikersCount;
//   int? iAmAgree;
//   int? iAmDisAgree;
//   bool? isContainerAdsLoaded = false;
//   NativeAd? ad;
//   AcceptUserDetail? userDetail;
//   String? id;
//
//   PostForMudda(
//       {this.sId,
//         this.userId,
//         this.muddaId,
//         this.isContainerAdsLoaded,
//         this.postAs,
//         this.thumbnail,
//         this.title,
//         this.muddaDescription,
//         this.hashtags,
//         this.postIn,
//         this.isVerify,
//         this.verifyBy,
//         this.status,
//         this.createdBy,
//         this.updatedBy,
//         this.deleted,
//         this.createdAt,
//         this.updatedAt,
//         this.iV,
//         this.gallery,
//         this.comments,
//         this.commentorsCount,
//         this.liker,
//         this.likersCount,
//         this.disliker,
//         this.dislikersCount,
//         this.iAmAgree,
//         this.iAmDisAgree,
//         this.userDetail,
//         this.id});
//
//   PostForMudda.fromJson(Map<String, dynamic> json) {
//     sId = json['_id'];
//     userId = json['user_id'];
//     muddaId = json['mudda_id'];
//     postAs = json['post_as'];
//     thumbnail = json['thumbnail'];
//     title = json['title'];
//     muddaDescription = json['mudda_description'];
//     hashtags = json['hashtags'].cast<String>();
//     postIn = json['post_in'];
//     isVerify = json['isVerify'];
//     verifyBy = json['verify_by'];
//     status = json['status'];
//     createdBy = json['created_by'];
//     updatedBy = json['updated_by'];
//     deleted = json['deleted'];
//     createdAt = json['createdAt'];
//     updatedAt = json['updatedAt'];
//     iV = json['__v'];
//     if (json['gallery'] != null) {
//       gallery = <Gallery>[];
//       json['gallery'].forEach((v) {
//         gallery!.add(new Gallery.fromJson(v));
//       });
//     }
//     if (json['comments'] != null) {
//       comments = <Comments>[];
//       json['comments'].forEach((v) {
//         comments!.add(new Comments.fromJson(v));
//       });
//     }
//     commentorsCount = json['commentorsCount'] ?? 0;
//     if (json['liker'] != null) {
//       liker = <Comments>[];
//       json['liker'].forEach((v) {
//         liker!.add(Comments.fromJson(v));
//       });
//     }
//     likersCount = json['likersCount'] ?? 0;
//     iAmDisAgree = json['iAmDisAgree'] ?? 0;
//     iAmAgree = json['iAmAgree'] ?? 0;
//     if (json['disliker'] != null) {
//       disliker = <Comments>[];
//       json['disliker'].forEach((v) {
//         disliker!.add(Comments.fromJson(v));
//       });
//     }
//     dislikersCount = json['dislikersCount'] ?? 0;
//     userDetail = json['userDetail'] != null
//         ? AcceptUserDetail.fromJson(json['userDetail'])
//         : null;
//     id = json['id'];
//   }
//
//   Map<String, dynamic> toJson() {
//     final Map<String, dynamic> data = Map<String, dynamic>();
//     data['_id'] = this.sId;
//     data['user_id'] = this.userId;
//     data['mudda_id'] = this.muddaId;
//     data['post_as'] = this.postAs;
//     data['thumbnail'] = this.thumbnail;
//     data['title'] = this.title;
//     data['mudda_description'] = this.muddaDescription;
//     data['hashtags'] = this.hashtags;
//     data['post_in'] = this.postIn;
//     data['isVerify'] = this.isVerify;
//     data['verify_by'] = this.verifyBy;
//     data['status'] = this.status;
//     data['created_by'] = this.createdBy;
//     data['updated_by'] = this.updatedBy;
//     data['deleted'] = this.deleted;
//     data['createdAt'] = this.createdAt;
//     data['updatedAt'] = this.updatedAt;
//     data['__v'] = this.iV;
//     if (this.gallery != null) {
//       data['gallery'] = this.gallery!.map((v) => v.toJson()).toList();
//     }
//     if (this.comments != null) {
//       data['comments'] = this.comments!.map((v) => v.toJson()).toList();
//     }
//     data['commentorsCount'] = this.commentorsCount;
//     if (this.liker != null) {
//       data['liker'] = this.liker!.map((v) => v.toJson()).toList();
//     }
//     data['likersCount'] = this.likersCount;
//     if (this.disliker != null) {
//       data['disliker'] = this.disliker!.map((v) => v.toJson()).toList();
//     }
//     data['dislikersCount'] = this.dislikersCount;
//     if (this.userDetail != null) {
//       data['userDetail'] = this.userDetail!.toJson();
//     }
//     data['id'] = this.id;
//     return data;
//   }
// }
//
// class Gallery {
//   String? sId;
//   String? userId;
//   String? relativeId;
//   String? relativeType;
//   String? file;
//   String? path;
//   int? status;
//   Null? createdBy;
//   Null? updatedBy;
//   bool? deleted;
//   String? createdAt;
//   String? updatedAt;
//   int? iV;
//
//   Gallery(
//       {this.sId,
//         this.userId,
//         this.relativeId,
//         this.relativeType,
//         this.file,
//         this.path,
//         this.status,
//         this.createdBy,
//         this.updatedBy,
//         this.deleted,
//         this.createdAt,
//         this.updatedAt,
//         this.iV});
//
//   Gallery.fromJson(Map<String, dynamic> json) {
//     sId = json['_id'];
//     userId = json['user_id'];
//     relativeId = json['relative_id'];
//     relativeType = json['relative_type'];
//     file = json['file'];
//     path = json['path'];
//     status = json['status'];
//     createdBy = json['created_by'];
//     updatedBy = json['updated_by'];
//     deleted = json['deleted'];
//     createdAt = json['createdAt'];
//     updatedAt = json['updatedAt'];
//     iV = json['__v'];
//   }
//
//   Map<String, dynamic> toJson() {
//     final Map<String, dynamic> data = new Map<String, dynamic>();
//     data['_id'] = this.sId;
//     data['user_id'] = this.userId;
//     data['relative_id'] = this.relativeId;
//     data['relative_type'] = this.relativeType;
//     data['file'] = this.file;
//     data['path'] = this.path;
//     data['status'] = this.status;
//     data['created_by'] = this.createdBy;
//     data['updated_by'] = this.updatedBy;
//     data['deleted'] = this.deleted;
//     data['createdAt'] = this.createdAt;
//     data['updatedAt'] = this.updatedAt;
//     data['__v'] = this.iV;
//     return data;
//   }
// }
//
// class Comments {
//   String? sId;
//   String? userId;
//   String? relativeId;
//   String? relativeType;
//   String? commentType;
//   String? commentText;
//   int? userIdentity;
//   int? status;
//   bool? deleted;
//   String? createdAt;
//   String? updatedAt;
//   int? iV;
//   AcceptUserDetail? user;
//   List<Comments>? replies;
//   int? likersCount;
//   int? dislikersCount;
//   int? iAmAgree;
//   int? iAmDisAgree;
//   String? id;
//
//   Comments(
//       {this.sId,
//         this.userId,
//         this.relativeId,
//         this.relativeType,
//         this.commentType,
//         this.commentText,
//         this.userIdentity,
//         this.status,
//         this.deleted,
//         this.createdAt,
//         this.updatedAt,
//         this.iV,
//         this.user,
//         this.replies,
//         this.likersCount,
//         this.dislikersCount,
//         this.iAmAgree,
//         this.iAmDisAgree,
//         this.id});
//
//   Comments.fromJson(Map<dynamic, dynamic> json) {
//     sId = json['_id'];
//     userId = json['user_id'];
//     relativeId = json['relative_id'];
//     relativeType = json['relative_type'];
//     commentType = json['comment_type'];
//     commentText = json['commentText'];
//     userIdentity = json['user_identity'];
//     status = json['status'];
//     deleted = json['deleted'];
//     createdAt = json['createdAt'];
//     updatedAt = json['updatedAt'];
//     iV = json['__v'];
//     user = json['user'] != null ? AcceptUserDetail.fromJson(json['user']) : null;
//     if (json['replies'] != null) {
//       replies = <Comments>[];
//       json['replies'].forEach((v) {
//         replies!.add(Comments.fromJson(v));
//       });
//     }
//     likersCount = json['likersCount'] ?? 0  ;
//     dislikersCount = json['dislikersCount'] ?? 0;
//     iAmDisAgree = json['iAmDisAgree'] ?? 0;
//     iAmAgree = json['iAmAgree'];
//     id = json['id'];
//   }
//
//   Map<String, dynamic> toJson() {
//     final Map<String, dynamic> data = new Map<String, dynamic>();
//     data['_id'] = this.sId;
//     data['user_id'] = this.userId;
//     data['relative_id'] = this.relativeId;
//     data['relative_type'] = this.relativeType;
//     data['comment_type'] = this.commentType;
//     data['commentText'] = this.commentText;
//     data['status'] = this.status;
//     data['deleted'] = this.deleted;
//     data['createdAt'] = this.createdAt;
//     data['updatedAt'] = this.updatedAt;
//     data['__v'] = this.iV;
//     if (this.user != null) {
//       data['user'] = this.user!.toJson();
//     }
//     if (this.replies != null) {
//       data['replies'] = this.replies!.map((v) => v.toJson()).toList();
//     }
//     data['likersCount'] = this.likersCount;
//     data['dislikersCount'] = this.dislikersCount;
//     data['id'] = this.id;
//     return data;
//   }
// }

class ContainerDataResult {
  String? Id;
  int? totalUsers;
  int? containerUsers;
  int? supportPercentage;
  dynamic favour;
  dynamic opposition;

  ContainerDataResult({
    this.Id,
    this.totalUsers,
    this.containerUsers,
    this.supportPercentage,
    this.favour,
    this.opposition,
  });

  ContainerDataResult.fromJson(Map<String, dynamic> json) {
    Id = json['_id']?.toString();
    totalUsers = json['totalUsers']?.toInt();
    containerUsers = json['containerUsers']?.toInt();
    supportPercentage = json['supportPercentage']?.toInt();
    favour = json['favour'];
    opposition = json['opposition'];
  }

  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['_id'] = Id;
    data['totalUsers'] = totalUsers;
    data['containerUsers'] = containerUsers;
    data['supportPercentage'] = supportPercentage;
    data['favour'] = this.favour;
    data['opposition'] = this.opposition;
    return data;
  }
}

class ContainerData {
  List<ContainerDataResult?>? result;
  String? message;
  bool? success;
  int? status;

  ContainerData({
    this.result,
    this.message,
    this.success,
    this.status,
  });

  ContainerData.fromJson(Map<dynamic, dynamic> json) {
    if (json['result'] != null) {
      final v = json['result'];
      final arr0 = <ContainerDataResult>[];
      v.forEach((v) {
        arr0.add(ContainerDataResult.fromJson(v));
      });
      result = arr0;
    }
    message = json['message']?.toString();
    success = json['success'];
    status = json['status']?.toInt();
  }

  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    if (result != null) {
      final v = result;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data['result'] = arr0;
    }
    data['message'] = message;
    data['success'] = success;
    data['status'] = status;
    return data;
  }
}
